scriptencoding utf-8

"""  NeoBundle {{{
set nocompatible               " Be iMproved
filetype off                   " Required!

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle/'))

filetype plugin indent on     " Required!

" Installation check.
if neobundle#exists_not_installed_bundles()
  echomsg 'Not installed bundles : ' .
          \ string(neobundle#get_not_installed_bundle_names())
  echomsg 'Please execute ":NeoBundleInstall" command.'
              "finish
endif
""" }}}

""" load vimrc of local {{{
augroup vimrc-local
  autocmd!
  autocmd BufNewFile,BufReadPost * call s:vimrc_local(expand('<afile>:p:h'))
augroup END

function! s:vimrc_local(loc)
  let files = findfile('.lcvimrc', escape(a:loc, ' ') . ';', -1)
  for i in reverse(filter(files, 'filereadable(v:val)'))
    source `=i`
  endfor
endfunction
""" }}}

"""  Plugins {{{
"" api {{{
NeoBundle 'Shougo/vimproc', {
\   'build': {
\       'windows' : 'make -f make_mingw32.mak',
\       'cygwin'  : 'make -f make_cygwin.mak',
\       'mac'     : 'make -f make_mac.mak',
\       'unix'    : 'make -f make_unix.mak'
\ }}

NeoBundle 'Shougo/unite.vim'

NeoBundle 'mattn/webapi-vim'

NeoBundle 'tyru/open-browser.vim'
nmap <Leader>b <Plug>(openbrowser-open)

NeoBundle 'kana/vim-operator-user'
"" }}}

"" move {{{
NeoBundle 'Lokaltog/vim-easymotion'
nmap mm <Plug>(easymotion-s2)

NeoBundle 'tpope/vim-abolish'
"" }}}

"" general input {{{
NeoBundle 'AndrewRadev/switch.vim'
nnoremap <silent> <leader>s  :<C-u>Switch<CR>
let g:switch_custom_definitions = [
        \['=', ' = '],
        \['+', ' + '],
        \['-', ' - '],
        \['*', ' * '],
        \['/', ' / '],
    \]

NeoBundle 'cohama/lexima.vim'

NeoBundle 'tpope/vim-surround'
let g:surround_{char2nr('@')} = "```\n\r\n```\n"
let g:surround_{char2nr('7')} = "'''\n\r\n'''\n"
let g:surround_{char2nr('2')} = "\"\"\"\n\r\n\"\"\""
let g:surround_{char2nr('4')} = "$\r$"

NeoBundle 'tsaleh/vim-align'
let g:Align_xstrlen = 3 " for japanese environment"

NeoBundle 'mattn/excitetranslate-vim'
nnoremap <silent>& :<c-u>ExciteTranslate<cr>

NeoBundle 'Shougo/neosnippet-snippets'

NeoBundle 'payneseu/YankRing'

NeoBundle 'Shougo/neosnippet.vim'
let g:neosnippet#disable_runtime_snippets = {'_': 1}
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory='~/.vim/snippets/'
let g:neocomplete#enable_fuzzy_completion = 0

" Super tab like snippets behavior
imap <expr><c-l> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible()? "<c-n>": "\<tab>"
smap <expr><c-l> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<tab>"
" for snippet_complete marker
if has("conceal")
    set conceallevel=2
endif
imap <c-k> <Plug>(neosnippet_expand_or_jump)
smap <c-k> <Plug>(neosnippet_expand_or_jump)
xmap <c-k> <Plug><Plug>(neosnippet_expand_target)

command! CdSnip :cd ~/.vim/snippets/
"" }}}

"" load file {{{
NeoBundle 'scrooloose/nerdtree'
nnoremap <silent><leader>N :NERDTreeToggle<cr>
let NERDTreeShowHidden = 1

NeoBundle 'yegappan/mru'

NeoBundle 'jlanzarotta/bufexplorer'

NeoBundle 'glidenote/memolist.vim'
let g:memolist_memo_suffix = "txt"
let g:memolist_path = "~/Dropbox/memo/"
let g:memolist_memo_date = "%Y/%m/%d(%a) %H:%M"
command! MNew :MemoNew
command! MGrep :MemoGrep
command! MList :MemoList


NeoBundle 'xolox/vim-session', {
    \ 'depends': 'xolox/vim-misc'
\}
" 現在のディレクトリ直下の .vimsessions/ を取得 
let s:local_session_directory = xolox#misc#path#merge(getcwd(), '.vimsessions')
" 存在すれば
if isdirectory(s:local_session_directory)
  " session保存ディレクトリをそのディレクトリの設定
  let g:session_directory = s:local_session_directory
  " vimを辞める時に自動保存
  let g:session_autosave = 'yes'
  " 引数なしでvimを起動した時にsession保存ディレクトリのdefault.vimを開く
  let g:session_autoload = 'yes'
else
  let g:session_autosave = 'no'
  let g:session_autoload = 'no'
endif
unlet s:local_session_directory
"
command! SaveS :SaveSession
"" }}}

"" show {{{
NeoBundle 'Yggdroot/indentLine'

NeoBundle 'bronson/vim-trailing-whitespace'
let g:extra_whitespace_ignored_filetypes = ['conque_term']
""}}}

"" syntax{{{
NeoBundle 'plasticboy/vim-markdown'

NeoBundle 'vim-scripts/maxima.vim'

NeoBundle 'mhaig/vim-blockdiag-series'

NeoBundle 'aklt/plantuml-syntax'
"" }}}

"" Terminal {{{
NeoBundle 'nicoraffo/conque'
let g:ConqueTerm_ReadUnfocused = 1
let g:ConqueTerm_CloseOnEnd = 1
let g:ConqueTerm_StartMessages = 0
let g:ConqueTerm_CWInsert = 1
noremap <silent><Space>sh :ConqueTermTab zsh<cr>
noremap <silent><Space>tsh :ConqueTermTab zsh<cr>
noremap <silent><Space>vsh :ConqueTermVSplit zsh<cr>
noremap <silent><Space>py :ConqueTermTab ipython3<cr>
noremap <silent><Space>tpy :ConqueTermTab ipython3<cr>
noremap <silent><Space>vpy :ConqueTermVSplit ipython3<cr>
noremap <silent><Space>trb :ConqueTermTab irb<cr>
noremap <silent><Space>vrb :ConqueTermVSplit irb --simple-prompt<cr>

function! s:delete_ConqueTerm(buffer_name)
    let term_obj = conque_term#get_instance(a:buffer_name)
    call term_obj.close()
endfunction
autocmd BufWinLeave zsh\s-\s? call <SID>delete_ConqueTerm(expand('%'))
nnoremap <Space>vsh :ConqueTermVSplit zsh
"" }}}

"" textobj{{{
NeoBundle 'lucapette/vim-textobj-underscore'

NeoBundle 'kana/vim-textobj-entire'

NeoBundle 'kana/vim-textobj-user'

NeoBundle 'kana/vim-textobj-indent'
""}}}

"" vcs {{{
NeoBundle 'cohama/agit.vim'

NeoBundle 'tpope/vim-fugitive'
command! Gcom :Gcommit

NeoBundle 'vim-scripts/vcscommand.vim'
command! VAdd :VCSAdd<cr>
command! VDiff :VCSDiff<cr>
command! VStatus :VCSStatus<cr>
command! VLog :VCSLog<cr>
command! VCommit :VCSCommit<cr>

NeoBundle 'rhysd/committia.vim'
"" }}}

"" general programming {{{
NeoBundle 'tomtom/tcomment_vim'
nnoremap <leader>c :TComment<cr>
xmap <leader>c :TComment<cr>
let g:tcomment_types = {
    \ 'plantuml': "' %s"
\}


NeoBundle 'thinca/vim-quickrun'
" 全体の設定
let g:quickrun_config = {
\   "_": {
\       "runner": "vimproc",
\   }
\}
let g:quickrun_config = {}

" pythonのtest用の設定
" for ruby
let g:quickrun_config['ruby'] = {'exec': ['%c %s -E UTF-8']}
NeoBundle 'thinca/vim-ref'
NeoBundle 'bps/vim-textobj-python'
call textobj#user#map('python', {
      \   'class': {
      \     'select-a': '<buffer>ac',
      \     'select-i': '<buffer>ic',
      \     'move-n': '<buffer>]c',
      \     'move-p': '<buffer>[c',
      \   },
      \   'function': {
      \     'select-a': '<buffer>af',
      \     'select-i': '<buffer>if',
      \     'move-n': '<buffer>]f',
      \     'move-p': '<buffer>[f',
      \   }
      \ })

" quickrun.vim 用設定
let g:quickrun_config['python.test'] = {'command': 'nosetests', 'exec': ['%c -v %s']}
let g:quickrun_config['python'] = {'command': 'python3'}

let g:quickrun_config['maxima'] = {'command': 'maxima', 'exec': ['%c -b %s']}
" blockdiag
let g:quickrun_config['blockdiag'] = {
            \'command': 'blockdiag',
            \'exec': ['%c -a %s -o %{expand("%:r")}.png', 'display %{expand("%:r")}.png'],
            \'outputter':'message',
            \}

let g:quickrun_config['tex'] = {
            \'command': 'platex',
            \'exec': ['%c %s && dvipdfmx %{expand("%:r").dvi && evince'],
            \'outputter': 'message'
            \}

let g:quickrun_config['plantuml'] = {
            \'command': 'java',
            \'exec': [
                \'%c -jar ~/bin/plantuml.8020.jar %s -tpng',
                \'display %s:p:r.png'
                \],
            \'outputter': 'null'
            \}
"}}}

"" todo {{{
NeoBundle 'yassu/todo-env.vim'
nnoremap <Leader>t :e ~/WorkSpace/todo<cr>
let g:todo_env_date_format = "%Y/%m/%d %H:%M"
""}}}

"" markdown{{{
NeoBundle 'mizyoukan/previm'
let g:previm_enable_realtime=1
autocmd FileType markdown nnoremap <buffer> <Leader>P :PrevimOpen<cr>
""}}}

"" python {{{
NeoBundle 'davidhalter/jedi-vim'
let g:jedi#rename_command = ""
let g:jedi#show_function_definition = 0
" docは表示しない
autocmd FileType python setlocal completeopt-=preview

NeoBundle 'nvie/vim-flake8'
autocmd FileType python nnoremap <leader>& :call Flake8()<cr>
autocmd FileType python command! FK :call Flake8()<cr>

NeoBundle 'bps/vim-textobj-python'
"" }}}

"" Ruby {{{
NeoBundle 'ngmy/vim-rubocop'
autocmd FileType ruby nnoremap <leader>& :RuboCop<cr>

NeoBundle 'vim-ruby/vim-ruby'

NeoBundle 'rhysd/vim-textobj-ruby'

NeoBundle 'tpope/vimendwise'
"" }}}

"" help {{{
NeoBundle 'vim-jp/vimdoc-ja'
helptags ~/.vim/bundle/vimdoc-ja/doc
"" }}}
""" }}}

""" filetype {{{
autocmd BufWinEnter,BufNewFile SConstruct set filetype=python
autocmd BufWinEnter,BufNewFile *test*.py set filetype=python.test
autocmd BufWinEnter,BufNewFile *todo* set filetype=todo
autocmd BufWinEnter,BufNewFile *task* set filetype=todo
autocmd BufNewFile,BufRead *.tex  setfiletype plaintex
autocmd BufNewFile,BufRead *.sage setfiletype python
autocmd BufNewFile,BufRead *.markdown setfiletype markdown
autocmd BufNewFile,BufRead *.plant setfiletype plantuml
autocmd BufNewFile,BufRead *.diag setfiletype blockdiag
autocmd BufNewFile,BufRead *.max setfiletype maxima
""" }}}

colorscheme evening

""" system{{{
filetype plugin indent on
filetype plugin on
filetype indent on
syntax on
set clipboard=unnamedplus

"" Backspaceでなんでも消せる
set backspace=indent,eol,start

"" backupをとらない {{{
set nowritebackup
set nobackup
set noswapfile
"" }}}

"" 終了するときにファイル情報を保存する {{{
autocmd BufWinLeave *? silent mkview
autocmd BufWinEnter *? silent loadview
"" }}}

" すべての数値を10進数と考える"
set nrformats =
""" }}}

""" view {{{
"" statusbarの設定 {{{
" 常にstatuslineを表示する
set laststatus=2
" formatの設定
set statusline=%F%m%r%h%w\ [TYPE=%Y]\ [POS=%04l,%04v][%p%%]
"" }}}

" 行末のmarkerを表示しない
set nolist

" completetion about repring filename
set wildmode=list:longest

set conceallevel=0

" 上下に三文字ずつ表示させる.
set scrolloff=3

" 行番号を表示
set number
"""}}}

""" moving{{{
"" setting of tab{{{
" Anywhere SID.
function! s:SID_PREFIX()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction

" Set tabline.
function! s:my_tabline()
  let s = ''
  for i in range(1, tabpagenr('$'))
    let bufnrs = tabpagebuflist(i)
    let bufnr = bufnrs[tabpagewinnr(i) - 1]  " first window, first appears
    let no = i  " display 0-origin tabpagenr.
    let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
    let title = fnamemodify(bufname(bufnr), ':t')
    let title = '[' . title . ']'
    let s .= '%'.i.'T'
    let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
    let s .= no . ':' . title
    let s .= mod
    let s .= '%#TabLineFill# '
  endfor
  let s .= '%#TabLineFill#%T%=%#TabLine#'
  return s
endfunction
let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
set showtabline=2 " 常にタブラインを表示

" The prefix key.
nnoremap    [Tag]   <Nop>
nmap    t [Tag]
" Tab jump
for n in range(1, 9)
  execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'
endfor
" t1 で1番左のタブ、t2 で1番左から2番目のタブにジャンプ

map <silent> [Tag]c :tablast <bar> tabnew<CR>
" tc 新しいタブを一番右に作る
map <silent> [Tag]x :tabclose<CR>
" tx タブを閉じる
map <silent> [Tag]n :tabnext<CR>
" tn 次のタブ
map <silent> [Tag]p :tabprevious<CR>
" tp 前のタブ
"" }}}

"" searching
set incsearch
"""}}}

""" general editing {{{
"" setting of tab{{{
set tabstop=4
set softtabstop=4
set shiftwidth=4
""}}}

"" commentを自動で挿入しない
set formatoptions-=r

"" "%"の拡張 {{{
runtime macros/matchit.vim
runtime macros/editexisting.vim
"" }}}

"" 文字のサーチの拡張 {{{
function! s:VSetSearch(cmdtype)
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction

xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>
nmap <leader>* :execute 'noautocmd vimgrep /\V' . substitute(escape(expand("<cword>"), '\'), '\n', '\\n', 'g') . '/ **'<CR>
vmap <leader>* :<C-u>call <SID>VSetSearch()<CR>:execute 'noautocmd vimgrep /' . @/ . '/ **'<CR>
"" }}}

"" 賢いインデント {{{
set autoindent
set smartindent
"" }}}

"" expandtab {{{
set expandtab
"" }}}

"" 文字列削除のためのコマンドのmap {{{
nnoremap <silent>c_ ct_
nnoremap <silent>d_ dt_
nnoremap <silent>c) ct)
nnoremap <silent>d) dt)
nnoremap <silent>c} ct}
nnoremap <silent>d} dt}
nnoremap <silent>c] ct]
nnoremap <silent>d] dt]
nnoremap <silent>d' dt'
nnoremap <silent>c' ct'
nnoremap <silent>d" dt"
nnoremap <silent>c" ct"
nnoremap <silent>d. dt.
nnoremap <silent>c. ct.
nnoremap <silent>d\ d$
nnoremap <silent>c$ d$a
nnoremap <silent>c\ c$
"" }}}
"""}}}

""" mapping {{{

command! Redraw :redraw
"" vimrc {{
nnoremap <leader>. :e      ~/dotfiles/vimrc<cr>
nnoremap <Leader>? :source ~/dotfiles/vimrc<cr>
"" }}

"" memo
nnoremap <leader>me :e ~/Dropbox/memo.markdown<cr>

"" task {{{
let g:task_suffix = "task"
let g:task_path = "~/Dropbox/task/"
let g:task_date = "%Y/%m/%d(%a) %H:%M"

function! s:task_edit(...) "{{{
    " assume that len(a:000) <= 1
let l:advance = get(a:, 1, '0')
python << EOF
import vim
from datetime import datetime, timedelta

date = datetime.today()
advance_day = int(vim.eval('l:advance'))
date += timedelta(days=advance_day)
task_filename = '%02d' % date.year + '-%02d' % date.month + '-%02d' % date.day
task_filename += '.' + vim.eval('g:task_suffix')
vim.command("execute 'e' g:task_path . '{}'".format(task_filename))
EOF
endfunction
" }}}

command! -nargs=? TEdit call s:task_edit(<f-args>)
command! -nargs=1 TGrep :execute 'vimgrep' <f-args> g:task_path. '/*'
"" }}}



"" 今開いているディレクトリをroot dirに
command! Cd :cd %:h

nnoremap <cr> z<cr>

nnoremap <Space>w :<C-u>write<cr>
nnoremap <Space>q :<C-u>quit<cr>
nnoremap <Space>Q :<C-u>write<cr>:<C-u>quit<cr>

""" <c-c>で次の行に移動してnormalmodeに
nnoremap <silent><c-c> o<esc>

""" ウィンドウの移動 {{{
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
" }}}

"" arrow{{{
nnoremap <RIGHT> :cnext<cr>
nnoremap <LEFT>  :cprevious<cr>
nnoremap <UP>    {
nnoremap <DOWN>  }
""}}}

"""}}}

" general programming{{{
iabbrev ret return
iabbrev rai raise

set makeprg=scons
" }}}

""" setting for filetypes{{{
"" vim{{{
" :Source で選択部分だけ vimscript る
" http://subtech.g.hatena.ne.jp/motemen/20080313/1205336864
command! -range=% Source split `=tempname()` | call append(0, getbufline('#', <line1>, <line2>)) | write | source % | bdelete
" }}}

"" ruby
autocmd BufNewFile *.rb 0r ~/.vim/templates/rb.tpl
"" plantuml
autocmd BufNewFile *.plant 0r ~/.vim/templates/plant.tpl
""" }}}

""" help {{{
" 縦分割でhelpを表示
nnoremap <Space>h :<c-u>vertical help<Space>

autocmd FileType help nnoremap <buffer> q :q<cr>
" }}}

" todo:
" vim
"   plugin:
"     only one plugin for git(agit?)
"     plugin for vertialenv(python)
"   setting:
"     snippet for entering TODO: ... with comment format
