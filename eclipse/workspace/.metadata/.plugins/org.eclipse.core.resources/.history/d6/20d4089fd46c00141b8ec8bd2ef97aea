package application.chara;

import java.util.Random;
import javafx.scene.image.ImageView;

import application.Main;


public abstract class AbstractWalkerGirl implements WalkerGirlInterface {

	/* キャラクター画像の情報 */
	protected GirlStruct girl = null;
	protected double height;
	protected double width;
	protected double defaultScaleX;

	/* 調整情報 */
	protected final double LAP_MAEGIN  = 10.0;
	protected final double TILT_ANGLE  = 20.0;

	protected final int    TILT_TIME   = 10;
	protected final int    SAY_TIME    = TILT_TIME;
	protected final double MOVE_SPEED  = 20.0;

	/* 自由移動状態 */
	protected final double FREE_STOPED     = -1;
	protected final int    WAIT_TIME_LIMIT = 150;
	protected final Random rnd  = new Random();
	protected double nextPointX = FREE_STOPED;
	protected double nextPointY = FREE_STOPED;
	protected int    nowWait    = 0;

	/* マウス追跡移動状態 */
	protected final double NO_TARGET = -1.0;
	protected double targetX = NO_TARGET;
	protected double targetY = NO_TARGET;

	/* その他の状態 */
	protected int     time       = 0;
	protected boolean toggleTilt = false;
	protected boolean toggleSay  = true;


	/* ---===---===---===---===---===---===--- */


	@Override
	public void ifAbsentSetImg(ImageView img, ImageView msg){
		if(girl == null){
			this.girl = new GirlStruct(img, msg);
			this.height        = img.getFitHeight();
			this.width         = img.getFitWidth();
			this.defaultScaleX = img.getScaleX();

			girl.setX(rnd.nextInt((int)Main.getClientWidth()));
			girl.setY(rnd.nextInt((int)Main.getClientHeight()));
			girl.setScaleX(-defaultScaleX);
		}
	}


	/* ---===---===---===---===---===---===--- */


	@Override
	public void incrTime(){
		this.time++;
	}

	/* ---===---===---===---===---===---===--- */

	@Override
	public void tilt(){
		if(this.time%TILT_TIME == 0){
			girl.setRotate( girl.getScaleX() == +defaultScaleX
					? !toggleTilt ? -TILT_ANGLE : 0
					: !toggleTilt ? +TILT_ANGLE : 0 );
			this.toggleTilt = !toggleTilt;
		}
	}

	/* ---===---===---===---===---===---===--- */

	@Override
	public void move(){
		// currentX, currentY
		double cx = girl.getX(), cy = girl.getY();

		if(targetX == NO_TARGET && targetY == NO_TARGET){
			// 自由移動
			this.moveOnFree(cx, cy);
		}else{
			// マウスを追う
			this.moveOnTrail(cx, cy);
		}

		// キャラクターの画像向き
		this.changeDirection(girl.getX());
	}

	protected void changeDirection(double cx){
		if(targetX == NO_TARGET){
			girl.setScaleX( cx < nextPointX
					? -defaultScaleX     // 画像右向き
					: +defaultScaleX );  // 画像左向き
		}else{
			girl.setScaleX( cx < targetX
					? -defaultScaleX
					: +defaultScaleX );
		}
	}

	protected void moveOnFree(double cx, double cy){
		if(this.nowWait == 0){
			if(this.nextPointX == FREE_STOPED && this.nextPointY == FREE_STOPED){
				nextPointX = rnd.nextInt((int)Main.getClientWidth());
				nextPointY = rnd.nextInt((int)Main.getClientHeight());
				nowWait    = rnd.nextInt(WAIT_TIME_LIMIT-50)+50;
			}
			girl.setX(nextPointX == FREE_STOPED
					? cx
					: cx < nextPointX ? cx+MOVE_SPEED : cx-MOVE_SPEED);
			girl.setY(nextPointY == FREE_STOPED
					? cy
					: cy < nextPointY ? cy+MOVE_SPEED : cy-MOVE_SPEED);

			cx = girl.getX();
			cy = girl.getY();
			if(nextPointX-LAP_MAEGIN <= cx && cx <= nextPointX+LAP_MAEGIN){
				nextPointX = FREE_STOPED;
			}
			if(nextPointY-LAP_MAEGIN <= cy && cy <= nextPointY+LAP_MAEGIN){
				nextPointY = FREE_STOPED;
			}
		}else{
			nowWait--;
		}
	}
	protected void moveOnTrail(double cx, double cy){
		if(cx != targetX){
			girl.setX( cx < targetX ? cx+MOVE_SPEED : cx-MOVE_SPEED );
			//
			if(targetX - LAP_MAEGIN <= girl.getX() && girl.getX() <= targetX + LAP_MAEGIN){
				girl.setX(targetX);
			}
		}
		if(cy != targetY){
			girl.setY( cy < targetY ? cy+MOVE_SPEED : cy-MOVE_SPEED );
			if(targetY - LAP_MAEGIN <= girl.getY() && girl.getY() <= targetY + LAP_MAEGIN){
				girl.setY(targetY);
			}
		}
		if(girl.getX() == targetX && girl.getY() == targetY){
			targetX = targetY = NO_TARGET;

			// 自由移動情報の再設定
			nowWait = rnd.nextInt(WAIT_TIME_LIMIT-50)+50;
			nextPointX = FREE_STOPED;
		}
	}


	@Override
	public void moveTo(double x, double y) {
		this.targetX = x - (this.width/2);
		this.targetY = y - (this.height/2);
	}
	
	
	@Override
	public void say(){
		if(this.nowWait != 0){
			if(this.time%SAY_TIME == 0){
				this.toggleSay = !toggleSay;
			}
		}

		if(toggleSay){
			girl.showMsg();
		}else{
			girl.hideMsg();
		}
	}
}
