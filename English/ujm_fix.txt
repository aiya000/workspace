commit 960e71e83ef2ac4e3cc1746d2e465d76b6029115
Author: Tatsuhiro Ujihisa <ujihisa@gmail.com>
Date:   Wed Dec 16 15:04:06 2015 -0800

    Fix English

diff --git a/README.md b/README.md
index 5bb4dec..ac48922 100644
--- a/README.md
+++ b/README.md
@@ -42,24 +42,23 @@ Run `:Repl` without saving the code on a file.
 * Python (You can chose python2 or python3 interpreter)
 
 ## TODO
+
 * Erlang
 
 ## Installation
 
-Example for neobundle.vim
+Example for [neobundle.vim](https://github.com/Shougo/neobundle.vim)
 
-Please write your .vimrc
+Please add the following line into your .vimrc
 
     NeoBundle 'ujihisa/repl.vim'
 
-and run :NeoBundleInstall
-
-will be available soon.
+and run `:NeoBundleInstall`.
 
-## Requries
+## Requirements
 
 * [vimshell.vim](https://github.com/Shougo/vimshell.vim)
-* [vimproc.vim](https://github.com/Shougo/vimproc.vim) (vimproc.vim was required by vimshell.vim)
+* [vimproc.vim](https://github.com/Shougo/vimproc.vim) (vimproc.vim is required by vimshell.vim)
 
 ## Authors
 

commit 6f86df76ad829922555fea36f247429f12a3bf29
Author: Tatsuhiro Ujihisa <ujihisa@gmail.com>
Date:   Sun Dec 13 00:59:57 2015 -0800

    Add another author

diff --git a/README.md b/README.md
index 6078058..5bb4dec 100644
--- a/README.md
+++ b/README.md
@@ -64,6 +64,7 @@ will be available soon.
 ## Authors
 
 * Tatsuhiro Ujihisa <ujihisa at gmail com>
+* aiya000 <aiya000.develop at gmail com>
 
 ## Licence
 

commit eb7c0263e20e12caa98bb61521b4f61deed41f01
Author: Tatsuhiro Ujihisa <ujihisa@gmail.com>
Date:   Sat Dec 12 14:59:57 2015 -0800

    Specify Licence

diff --git a/README.md b/README.md
index 55f1f3e..6078058 100644
--- a/README.md
+++ b/README.md
@@ -61,6 +61,11 @@ will be available soon.
 * [vimshell.vim](https://github.com/Shougo/vimshell.vim)
 * [vimproc.vim](https://github.com/Shougo/vimproc.vim) (vimproc.vim was required by vimshell.vim)
 
-## Author
+## Authors
 
-Tatsuhiro Ujihisa
+* Tatsuhiro Ujihisa <ujihisa at gmail com>
+
+## Licence
+
+GPL version 3 or any later version
+Copyright (c) Tatsuhiro Ujihisa

commit 3de433401c26dbcb655b2f2c0209eb7ed4ced947
Author: aiya000 <aiya000.develop@gmail.com>
Date:   Wed Dec 16 21:40:32 2015 +0900

    Move implementation plugin/ to autoload/

diff --git a/autoload/repl.vim b/autoload/repl.vim
new file mode 100644
index 0000000..dc1825f
--- /dev/null
+++ b/autoload/repl.vim
@@ -0,0 +1,128 @@
+scriptencoding utf-8
+let s:save_cpo = &cpo
+set cpo&vim
+"-------------------"
+"
+"TODO: Branch python2 and python3
+"TODO: DRY
+
+function! s:sorry()
+  echohl Error
+  echo "Sorry, repl.vim didn't support this filetype"
+  echohl None
+endfunction
+
+"function! s:CallVimShell(args)
+"  execute ':VimShellInteractive' a:args
+"endfunction
+
+"#-=- -=- -=- -=- -=- -=- -=- -=- -=-#"
+
+function! repl#run_repl()
+  if &filetype ==# 'ruby'
+    call repl#start_ruby()
+  elseif &filetype ==# 'haskell'
+    call repl#start_haskell()
+  elseif &filetype ==# 'erlang'
+    call s:sorry()
+    "call ReplErlang()
+  elseif &filetype ==# 'python'
+    call repl#start_python()
+  elseif &filetype ==# 'scala'
+    call s:sorry()
+    "call ReplScala()
+  elseif &filetype ==# 'clojure'
+    call s:sorry()
+    "call ReplClojure()
+  else
+    call s:sorry()
+  endif
+endfunction
+
+"#-=- -=- -=- -=- -=- -=- -=- -=- -=-#"
+
+function! repl#start_ruby()
+  " Setting up the obj file for the current file
+  if &modified
+    let l:module_file = tempname() . '.rb'
+    call writefile(getline(1, expand('$')), l:module_file)
+  else
+    let l:module_file = expand('%:p')
+  endif
+
+  let l:repl = exists('g:repl_filetype_repl.ruby') ? g:repl_filetype_repl.ruby['repl']
+  \                                                : g:repl#default_filetype_repl.ruby['repl']
+  let l:opt  = exists('g:repl_filetype_repl.ruby') ? g:repl_filetype_repl.ruby['opt']
+  \                                                : g:repl#default_filetype_repl.ruby['opt']
+  let l:args = printf('%s %s %s', l:repl, l:opt, l:module_file)
+  execute ':VimShellInteractive' l:args
+endfunction
+
+function! repl#start_haskell()
+  " Setting up the file for the current file
+  if &modified
+    " Create new file temporary
+    let l:module_file = tempname() . '.hs'
+    call writefile(getline(1, expand('$')), l:module_file)
+  else
+    let l:module_file = expand('%:p')
+  endif
+
+  let l:repl = exists('g:repl_filetype_repl.haskell') ? g:repl_filetype_repl.haskell['repl']
+  \                                                   : g:repl#default_filetype_repl.haskell['repl']
+  let l:opt  = exists('g:repl_filetype_repl.haskell') ? g:repl_filetype_repl.haskell['opt']
+  \                                                   : g:repl#default_filetype_repl.haskell['opt']
+  let l:args = printf('%s %s %s', l:repl, l:opt, l:module_file)
+  execute ':VimShellInteractive' l:args
+endfunction
+
+function! repl#start_python()
+  " Setting up the file for the current file
+  if &modified
+    " Create new file temporary
+    let l:module_file = tempname() . '.py'
+    call writefile(getline(1, expand('$')), l:module_file)
+  else
+    let l:module_file = expand('%:p')
+  endif
+
+  let l:repl = exists('g:repl_filetype_repl.python') ? g:repl_filetype_repl.python['repl']
+  \                                                  : g:repl#default_filetype_repl.python['repl']
+  let l:opt  = exists('g:repl_filetype_repl.python') ? g:repl_filetype_repl.python['opt']
+  \                                                  : g:repl#default_filetype_repl.python['opt']
+  let l:args = printf('%s %s %s', l:repl, l:opt, l:module_file)
+  execute ':VimShellInteractive' l:args
+endfunction
+
+
+"function! ReplErlang()
+"  " FIXME: this function messes current directly with a .bean file.
+"  let l:modulename = get(matchlist(join(getline(1, line('$'))), '-module(\(.\{-}\))\.'), 1, "ujihisa")
+"  let l:tmppath = substitute(tempname(), "[^/]*$", l:modulename, '')
+"  let l:tmpfile = l:tmppath . '.erl'
+"  "let l:tmpobj = tempname() . '.o'
+"  call writefile(getline(1, expand('$')), l:tmpfile, 'b')
+"  "call vimproc#system('ghc ' . l:tmpfile . ' -o ' . l:tmpobj)
+"  let l:args = 'erl'
+"  call vimshell#execute_internal_command(
+"        \ 'iexe', vimproc#parser#split_args(l:args), { 'stdin' : '', 'stdout' : '', 'stderr' : '' },
+"        \ { 'is_interactive' : 0, 'is_single_command' : 1 })
+"  let b:interactive.is_close_immediately = 1
+"  call vimshell#interactive#send_string(printf("c('%s').\n", l:tmppath), 1)
+"endfunction
+
+"function! ReplScala()
+"  let l:currentFile = expand('%')
+"  let l:args = 'scala -i ' . l:currentFile
+"  call s:CallVimShell(l:args)
+"endfunction
+
+"function! ReplClojure()
+"  let l:currentFile = expand('%')
+"  let l:args = 'clj -i ' . l:currentFile . ' -r'
+"  call s:CallVimShell(l:args)
+"endfunction
+
+"-------------------"
+let &cpo = s:save_cpo
+unlet s:save_cpo
diff --git a/plugin/repl.vim b/plugin/repl.vim
index dcf6510..8254d89 100644
--- a/plugin/repl.vim
+++ b/plugin/repl.vim
@@ -1,5 +1,11 @@
-"TODO: Branch python2 and python3
-"TODO: DRY
+scriptencoding utf-8
+if exists('g:loaded_repl_vim')
+  finish
+endif
+let g:loaded_repl_vim = 1
+let s:save_cpo = &cpo
+set cpo&vim
+"#--- --- ---#"
 
 let g:repl#default_filetype_repl = get(g:, 'repl_filetype_repl', {
 \ 'haskell' : {
@@ -16,112 +22,9 @@ let g:repl#default_filetype_repl = get(g:, 'repl_filetype_repl', {
 \ }
 \})
 
-function! Repl()
-  if &filetype == 'ruby'
-    call ReplRuby()
-  elseif &filetype == 'haskell'
-    call ReplHaskell()
-  elseif &filetype == 'erlang'
-    call ReplErlang()
-  elseif &filetype == 'python'
-    call ReplPython()
-  elseif &filetype == 'scala'
-    echohl Error
-    echo "Sorry, repl.vim didn't support this filetype"
-    echohl None
-    "call ReplScala()
-  elseif &filetype == 'clojure'
-    echohl Error
-    echo "Sorry, repl.vim didn't support this filetype"
-    echohl None
-    "call ReplClojure()
-  endif
-endfunction
+command! -bar -nargs=0 Repl call repl#run_repl()
+nnoremap <Plug>(repl-run) :<C-u>Repl<CR>
 
-"function! s:CallVimShell(args)
-"  execute ':VimShellInteractive' a:args
-"endfunction
-
-function! ReplRuby()
-  " Setting up the obj file for the current file
-  if &modified
-    let l:module_file = tempname() . '.rb'
-    call writefile(getline(1, expand('$')), l:module_file)
-  else
-    let l:module_file = expand('%:p')
-  endif
-
-  let l:repl = exists('g:repl_filetype_repl.ruby') ? g:repl_filetype_repl.ruby['repl']
-  \                                                : g:repl#default_filetype_repl.ruby['repl']
-  let l:opt  = exists('g:repl_filetype_repl.ruby') ? g:repl_filetype_repl.ruby['opt']
-  \                                                : g:repl#default_filetype_repl.ruby['opt']
-  let l:args = printf('%s %s %s', l:repl, l:opt, l:module_file)
-  execute ':VimShellInteractive' l:args
-endfunction
-
-function! ReplHaskell()
-  " Setting up the file for the current file
-  if &modified
-    " Create new file temporary
-    let l:module_file = tempname() . '.hs'
-    call writefile(getline(1, expand('$')), l:module_file)
-  else
-    let l:module_file = expand('%:p')
-  endif
-
-  let l:repl = exists('g:repl_filetype_repl.haskell') ? g:repl_filetype_repl.haskell['repl']
-  \                                                   : g:repl#default_filetype_repl.haskell['repl']
-  let l:opt  = exists('g:repl_filetype_repl.haskell') ? g:repl_filetype_repl.haskell['opt']
-  \                                                   : g:repl#default_filetype_repl.haskell['opt']
-  let l:args = printf('%s %s %s', l:repl, l:opt, l:module_file)
-  execute ':VimShellInteractive' l:args
-endfunction
-
-function! ReplErlang()
-  " FIXME: this function messes current directly with a .bean file.
-  let l:modulename = get(matchlist(join(getline(1, line('$'))), '-module(\(.\{-}\))\.'), 1, "ujihisa")
-  let l:tmppath = substitute(tempname(), "[^/]*$", l:modulename, '')
-  let l:tmpfile = l:tmppath . '.erl'
-  "let l:tmpobj = tempname() . '.o'
-  call writefile(getline(1, expand('$')), l:tmpfile, 'b')
-  "call vimproc#system('ghc ' . l:tmpfile . ' -o ' . l:tmpobj)
-  let l:args = 'erl'
-  call vimshell#execute_internal_command(
-        \ 'iexe', vimproc#parser#split_args(l:args), { 'stdin' : '', 'stdout' : '', 'stderr' : '' },
-        \ { 'is_interactive' : 0, 'is_single_command' : 1 })
-  let b:interactive.is_close_immediately = 1
-  call vimshell#interactive#send_string(printf("c('%s').\n", l:tmppath), 1)
-endfunction
-
-function! ReplPython()
-  " Setting up the file for the current file
-  if &modified
-    " Create new file temporary
-    let l:module_file = tempname() . '.py'
-    call writefile(getline(1, expand('$')), l:module_file)
-  else
-    let l:module_file = expand('%:p')
-  endif
-
-  let l:repl = exists('g:repl_filetype_repl.python') ? g:repl_filetype_repl.python['repl']
-  \                                                  : g:repl#default_filetype_repl.python['repl']
-  let l:opt  = exists('g:repl_filetype_repl.python') ? g:repl_filetype_repl.python['opt']
-  \                                                  : g:repl#default_filetype_repl.python['opt']
-  let l:args = printf('%s %s %s', l:repl, l:opt, l:module_file)
-  execute ':VimShellInteractive' l:args
-endfunction
-
-"function! ReplScala()
-"  let l:currentFile = expand('%') 
-"  let l:args = 'scala -i ' . l:currentFile
-"  call s:CallVimShell(l:args)
-"endfunction
-"
-"function! ReplClojure()
-"  let l:currentFile = expand('%') 
-"  let l:args = 'clj -i ' . l:currentFile . ' -r'
-"  call s:CallVimShell(l:args)
-"endfunction
-  
-command! -nargs=0 Repl call Repl()
-nnoremap <Plug>(repl-run) :<C-u>Repl<Cr>
+"-------------------"
+let &cpo = s:save_cpo
+unlet s:save_cpo

commit c541aa9378eff820fef60fc116c3a0a0f2153822
Author: aiya000 <aiya000.develop@gmail.com>
Date:   Wed Dec 16 20:37:48 2015 +0900

    Update README.md

diff --git a/README.md b/README.md
index d66adf3..55f1f3e 100644
--- a/README.md
+++ b/README.md
@@ -39,15 +39,27 @@ Run `:Repl` without saving the code on a file.
 
 * Ruby
 * Haskell
+* Python (You can chose python2 or python3 interpreter)
+
+## TODO
 * Erlang
 
 ## Installation
 
-    $ jolt install repl.vim
+Example for neobundle.vim
+
+Please write your .vimrc
+
+    NeoBundle 'ujihisa/repl.vim'
+
+and run :NeoBundleInstall
 
 will be available soon.
 
-This plugin depends on quickrun, vimshell and their dependencies.
+## Requries
+
+* [vimshell.vim](https://github.com/Shougo/vimshell.vim)
+* [vimproc.vim](https://github.com/Shougo/vimproc.vim) (vimproc.vim was required by vimshell.vim)
 
 ## Author
 

